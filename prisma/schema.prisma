generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model GenericEphemeral {
  key   String @unique
  value String
}

model GenericPersistent {
  key   String @unique
  value String
}

model Display {
  uuid    String @unique
  fieldId Int?
  name    String
  field   Field? @relation(fields: [fieldId], references: [id])
}

model Field {
  id            Int       @id @unique @default(autoincrement())
  name          String
  isCompetition Int @default(0)
  isSkills      Int @default(0)
  displays      Display[]
  scene         Scene?
  matches       Match[]
  onField       OnFieldMatch?
  onDeck        OnDeckMatch?
}

model OnDeckMatch {
  match Match @relation(fields: [matchId], references: [id])
  matchId Int @unique
  field Field @relation(fields: [fieldId], references: [id])
  fieldId Int @unique
}

model OnFieldMatch {
  match Match @relation(fields: [matchId], references: [id])
  matchId Int @unique
  field Field @relation(fields: [fieldId], references: [id])
  fieldId Int @unique
}

model Block {
  id     Int     @id @unique @default(autoincrement())
  name   String
  status String  @default("NOT_STARTED")
  Match  Match[]
}

model Match {
  id        Int    @id @unique @default(autoincrement())
  block     Block  @relation(fields: [blockId], references: [id])
  round     String
  number    Int
  sitting   Int
  status    String @default("NOT_STARTED")
  field     Field? @relation(fields: [fieldId], references: [id])
  red1      String
  red2      String
  blue1     String
  blue2     String
  blockId   Int
  fieldId   Int?
  time      String?
  onDeck    OnDeckMatch?
  onField   OnFieldMatch?

  @@unique([round, number, sitting])
}

model Scene {
  id      Int     @id @unique @default(autoincrement())
  field   Field?  @relation(fields: [fieldId], references: [id])
  fieldId Int     @unique
  camera  Camera?
}

model Camera {
  id      Int    @id @unique @default(autoincrement())
  address String @unique
  scene   Scene  @relation(fields: [sceneId], references: [id])
  sceneId Int    @unique
}
