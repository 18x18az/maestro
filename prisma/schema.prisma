// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model GenericEphemeral {
  key   String @unique
  value String
}

model GenericPersistent {
  key   String @unique
  value String
}

model Division {
  id Int @id @default(autoincrement())
  name String
}

model Team {
  number        String              @unique
  name          String
  city          String
  state         String
  country       String
  ageGroup      String
  checkIn       CheckIn?
  checkedPoints CheckedInspection[]
  team1 Alliance[] @relation(name: "team1")
  team2 Alliance[] @relation(name: "team2")
}

model Alliance {
  id Int @id @default(autoincrement())

  team1 Team @relation(fields: [team1Number], references: [number], name: "team1")
  team1Number String
  team2 Team? @relation(fields: [team1Number], references: [number], name: "team2")
  team2Number String?

  red Match[] @relation(name: "red")
  blue Match[] @relation(name: "blue")
}

model MatchBlock {
  id Int @id @default(autoincrement())
  start String

  firstMatch ScheduledMatch? @relation(fields: [firstMatchId], references: [id])
  firstMatchId Int? @unique
}

model Match {
  id Int @id @default(autoincrement())

  red Alliance @relation(fields: [redId], references: [id], name: "red")
  redId Int

  blue Alliance @relation(fields: [blueId], references: [id], name: "blue")
  blueId Int

  round String
  number Int

  scheduled ScheduledMatch[]
}

model ScheduledMatch {
  id Int @id @default(autoincrement())

  match Match @relation(fields: [matchId], references: [id])
  matchId Int

  nextMatch ScheduledMatch? @relation(fields: [nextMatchId], references: [id], name: "link")
  nextMatchId Int? @unique
  previousMatch ScheduledMatch? @relation(name: "link") 

  block MatchBlock?

  resolution Int
}

model CheckIn {
  team       Team   @relation(fields: [teamNumber], references: [number])
  teamNumber String @unique
  status     String
}

model InspectionGroup {
  name     String               @unique
  criteria InspectionCriteria[]
}

model InspectionCriteria {
  id        Int                 @id @default(autoincrement())
  group     InspectionGroup     @relation(fields: [groupName], references: [name])
  groupName String
  text      String              @unique
  met       CheckedInspection[]
  program   String?
}

model CheckedInspection {
  team       Team               @relation(fields: [teamNumber], references: [number])
  teamNumber String
  criteria   InspectionCriteria @relation(fields: [criteriaId], references: [id])
  criteriaId Int

  @@unique([teamNumber, criteriaId])
}

model Display {
  uuid    String  @unique
  field Field? @relation(fields: [fieldId], references: [id])
  fieldId Int?
  name    String
}

model Field {
  id  Int @id @default(autoincrement())
  name String
  isCompetition Int
  displays Display[]
}

model MatchScore {
  scoreId     Int      @id @unique @default(autoincrement())
  matchId     Int      
  redScore    String
  blueScore   String
  metadata    String
  autonWinner String
  timeSaved   DateTime @default(now())
}

model User {
  userId Int @id @unique @default(autoincrement())
  name String @unique @default(cuid())
  role String @default("NONE")
  key String
}
