# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Stage {
  """The current stage of the event"""
  stage: EventStage!
}

"""The current stage of the event"""
enum EventStage {
  WAITING_FOR_TEAMS
  CHECKIN
  QUALIFICATIONS
  ALLIANCE_SELECTION
  ELIMS
  TEARDOWN
}

type FieldControl {
  """
  The current mode of the field, null if undefined. Will still return a value even if it is not currently running.
  """
  mode: CONTROL_MODE

  """
  If the field is currently running, the time that the current running period will end.
  """
  endTime: DateTime

  """Whether the field is currently running"""
  isRunning: Boolean!

  """The field that this control object is associated with"""
  field: Field!
}

enum CONTROL_MODE {
  AUTO
  DRIVER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Representation of a single field"""
type Field {
  """Unique identifier for the field"""
  id: Int!

  """Name of the field"""
  name: String!

  """Whether the field is enabled for use"""
  isEnabled: Boolean!

  """
  Whether the field is allocated as a competition field. Can be true even if the field is disabled.
  """
  isCompetition: Boolean!

  """
  Whether or not the field can be used for skills. Can be true even if the field is disabled.
  """
  canRunSkills: Boolean!

  """
  Whether or not the field is allocated as a dedicated skills field. Can be true even if the field is disabled.
  """
  isSkills: Boolean!

  """
  The current state of field control on the field. Null if the field is disabled.
  """
  fieldControl: FieldControl
}

type TournamentManager {
  """
  The address of Tournament Manager. IP addresses must start with http e.g. http://192.168.1.42
  """
  url: URL

  """The status of the TM server"""
  status: TmStatus!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

enum TmStatus {
  INITIALIZING
  NOT_CONFIGURED
  DISCONNECTED
  CONNECTED
}

type Team {
  """Number of the team"""
  number: String!

  """Checkin status of the team"""
  checkin: Checkin!

  """Unique identifier for the team"""
  id: Int!
}

"""The checkin status of a team"""
enum Checkin {
  NOT_HERE
  CHECKED_IN
  NO_SHOW
}

type Query {
  fields: [Field!]!
  teams: [Team!]!
  stage: Stage!
  tournamentManager: TournamentManager!
}

type Mutation {
  updateField(fieldId: Int!, update: FieldUpdate!): Field!
  updateTeam(teamId: Int!, update: TeamUpdate!): Team!

  """Reset the event. Only available in test mode."""
  reset: Stage!
  configureTournamentManager(settings: TournamentManagerSetup!): TournamentManager!
}

input FieldUpdate {
  """Name of the field"""
  name: String

  """Whether the field is enabled for use"""
  isEnabled: Boolean

  """True for a competition field, false for a dedicated skills field"""
  isCompetition: Boolean

  """
  Set a competition field to be able to run skills. Meaningless if the field is already a dedicated skills field.
  """
  canRunSkills: Boolean
}

input TeamUpdate {
  """Number of the team"""
  number: String

  """Checkin status of the team"""
  checkin: Checkin
}

input TournamentManagerSetup {
  """
  The address of Tournament Manager. IP addresses must start with http e.g. http://192.168.1.42
  """
  url: URL!
}